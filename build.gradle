/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    repositories { jcenter() }
    ext {
        versions = [:]
        libraries = [:]
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'jacoco'

    id 'nebula.info' version '3.0.3'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.maven-publish' version '4.4.4'
    id 'nebula.nebula-release' version '4.0.1'
    id 'nebula.nebula-bintray' version '3.3.4'
    id 'nebula.facet' version '3.0.4'
    id 'nebula.javadoc-jar' version '4.4.4'
    id 'nebula.maven-apache-license' version '4.4.4'
    id 'nebula.source-jar' version '4.4.4'

    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'com.github.kt3k.coveralls' version '2.6.3'

    id 'com.github.ben-manes.versions' version '0.11.3'
}

dependencies {
    compile 'joda-time:joda-time:2.8.2'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.3'
}

// Attempt to get out of Gradle dependency hell (at least somewhat reflect the runtime classloading scheme) by forcefully ordering Gradle dependencies last

configurations {
    gradleApi
}

dependencies {
    gradleApi gradleApi()
    gradleApi localGroovy()
}

sourceSets.each {
    it.compileClasspath = it.compileClasspath - configurations.gradleApi + configurations.gradleApi
    it.runtimeClasspath = it.runtimeClasspath - configurations.gradleApi + configurations.gradleApi
}

facets {
    functionalTest {
        parentSourceSet = 'test'
        testTaskName = 'functionalTest'
    }
}

apply from: 'gradle/idea.gradle'
apply from: 'https://raw.githubusercontent.com/nebula-plugins/nebula-core/59c9e15f561372a8a72bbe13e4fbb114d0ef16f8/common.gradle'

description 'Gradle resolution rules plugin'

contacts {
    'dmthomas@gmail.com' {
        moniker 'Danny Thomas'
        github 'DanielThomas'
    }
    'nadavcoh@gmail.com' {
        moniker 'Nadav Cohen'
        github 'nadavc'
    }
    'rob.spieldenner@gmail.com' {
        moniker 'Rob Spieldenner'
        github 'rspieldenner'
    }
}

pluginBundle {
    plugins {
        resolutionRules {
            id = 'nebula.resolution-rules'
            displayName = 'Gradle Resolution Rules plugin'
            description = project.description
            tags = ['nebula', 'resolve', 'resolution', 'rules']
        }
        resolutionRulesProducer {
            id = 'nebula.resolution-rules-producer'
            displayName = 'Gradle Resolution Rules Producer plugin'
            description = 'Produces a resolution rules file to be consumed by \'nebula.resolution-rules\''
            tags = ['nebula', 'resolve', 'resolution', 'rules']
        }
    }
}
